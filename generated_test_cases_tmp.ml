open Unicode_bidi_class

type test_Case = { levels : int option list; ordering : int list;
                   data : (bidi_class list * int) list }

(** val test_cases : test_Case list **)

let test_cases =
  { levels = (None :: []); ordering = []; data = (((LRE :: []), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0)))))))) :: (((LRO :: []), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((RLE :: []), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((RLO :: []), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((PDF :: []), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((BN :: []), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: [])))))) } :: { levels = ((Some 0) :: []); ordering = (0 :: []); data =
    (((L :: []), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((EN :: []),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((ES :: []),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((ET :: []),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((CS :: []),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((NSM :: []),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((B :: []),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((S :: []),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((WS :: []),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((ON :: []),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((LRI :: []),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLI :: []),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((FSI :: []),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((PDI :: []),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))) :: [])))))))))))))) } :: { levels = ((Some ((fun x -> x + 1) 0)) :: []); ordering =
    (0 :: []); data = (((R :: []), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((AL :: []), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((ES :: []), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((ET :: []), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((CS :: []), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((NSM :: []),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((B :: []), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((S :: []), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((WS :: []), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((ON :: []),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((LRI :: []), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((RLI :: []), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((FSI :: []), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((PDI :: []),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: [])))))))))))))) } :: { levels = ((Some ((fun x -> x + 1) ((fun x -> x + 1)
    0))) :: []); ordering = (0 :: []); data = (((L :: []), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((EN :: []), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((AN :: []),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))))))) :: []))) } :: { levels =
    (None :: (None :: [])); ordering = []; data = (((LRE :: (LRE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0)))))))) :: (((LRE :: (LRO :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((LRE :: (RLE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((LRE :: (RLO :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((LRE :: (PDF :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((LRE :: (BN :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((LRO :: (LRE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((LRO :: (LRO :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((LRO :: (RLE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((LRO :: (RLO :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((LRO :: (PDF :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((LRO :: (BN :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((RLE :: (LRE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((RLE :: (LRO :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((RLE :: (RLE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((RLE :: (RLO :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((RLE :: (PDF :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((RLE :: (BN :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((RLO :: (LRE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((RLO :: (LRO :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((RLO :: (RLE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((RLO :: (RLO :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((RLO :: (PDF :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((RLO :: (BN :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((PDF :: (LRE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((PDF :: (LRO :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((PDF :: (RLE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((PDF :: (RLO :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((PDF :: (PDF :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((PDF :: (BN :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((BN :: (LRE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((BN :: (LRO :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((BN :: (RLE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((BN :: (RLO :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((BN :: (PDF :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((BN :: (BN :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: [])))))))))))))))))))))))))))))))))))) } :: { levels = ((Some
    0) :: (None :: [])); ordering = (0 :: []); data = (((L :: (LRE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((L :: (LRO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((L :: (RLE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((L :: (RLO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((L :: (PDF :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((L :: (BN :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((EN :: (LRE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((EN :: (LRO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((EN :: (RLE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((EN :: (RLO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((EN :: (PDF :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((EN :: (BN :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((ES :: (LRE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((ES :: (LRO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((ES :: (RLE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((ES :: (RLO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((ES :: (PDF :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((ES :: (BN :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((ET :: (LRE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((ET :: (LRO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((ET :: (RLE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((ET :: (RLO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((ET :: (PDF :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((ET :: (BN :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((CS :: (LRE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((CS :: (LRO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((CS :: (RLE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((CS :: (RLO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((CS :: (PDF :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((CS :: (BN :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((NSM :: (LRE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((NSM :: (LRO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((NSM :: (RLE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((NSM :: (RLO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((NSM :: (PDF :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((NSM :: (BN :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((S :: (LRE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((S :: (LRO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((S :: (RLE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((S :: (RLO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((S :: (PDF :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((S :: (BN :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((WS :: (LRE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((WS :: (LRO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((WS :: (RLE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((WS :: (RLO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((WS :: (PDF :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((WS :: (BN :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((ON :: (LRE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((ON :: (LRO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((ON :: (RLE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((ON :: (RLO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((ON :: (PDF :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((ON :: (BN :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((LRI :: (LRE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((LRI :: (LRO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((LRI :: (RLE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((LRI :: (RLO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((LRI :: (PDF :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((LRI :: (BN :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLI :: (LRE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLI :: (LRO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLI :: (RLE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLI :: (RLO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLI :: (PDF :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLI :: (BN :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((FSI :: (LRE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((FSI :: (LRO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((FSI :: (RLE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((FSI :: (RLO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((FSI :: (PDF :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((FSI :: (BN :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((PDI :: (LRE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((PDI :: (LRO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((PDI :: (RLE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((PDI :: (RLO :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((PDI :: (PDF :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((PDI :: (BN :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1)
    0)))) :: [])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) } :: { levels =
    ((Some ((fun x -> x + 1) 0)) :: (None :: [])); ordering = (0 :: []); data =
    (((R :: (LRE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((R :: (LRO :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((R :: (RLE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((R :: (RLO :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((R :: (PDF :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((R :: (BN :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((AL :: (LRE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((AL :: (LRO :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((AL :: (RLE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((AL :: (RLO :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((AL :: (PDF :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((AL :: (BN :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((ES :: (LRE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((ES :: (LRO :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((ES :: (RLE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((ES :: (RLO :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((ES :: (PDF :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((ES :: (BN :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((ET :: (LRE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((ET :: (LRO :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((ET :: (RLE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((ET :: (RLO :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((ET :: (PDF :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((ET :: (BN :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((CS :: (LRE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((CS :: (LRO :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((CS :: (RLE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((CS :: (RLO :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((CS :: (PDF :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((CS :: (BN :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((NSM :: (LRE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((NSM :: (LRO :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((NSM :: (RLE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((NSM :: (RLO :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((NSM :: (PDF :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((NSM :: (BN :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((S :: (LRE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((S :: (LRO :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((S :: (RLE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((S :: (RLO :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((S :: (PDF :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((S :: (BN :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((WS :: (LRE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((WS :: (LRO :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((WS :: (RLE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((WS :: (RLO :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((WS :: (PDF :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((WS :: (BN :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((ON :: (LRE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((ON :: (LRO :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((ON :: (RLE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((ON :: (RLO :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((ON :: (PDF :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((ON :: (BN :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((LRI :: (LRE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((LRI :: (LRO :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((LRI :: (RLE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((LRI :: (RLO :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((LRI :: (PDF :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((LRI :: (BN :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((RLI :: (LRE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((RLI :: (LRO :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((RLI :: (RLE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((RLI :: (RLO :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((RLI :: (PDF :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((RLI :: (BN :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((FSI :: (LRE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((FSI :: (LRO :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((FSI :: (RLE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((FSI :: (RLO :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((FSI :: (PDF :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((FSI :: (BN :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((PDI :: (LRE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((PDI :: (LRO :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((PDI :: (RLE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((PDI :: (RLO :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((PDI :: (PDF :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((PDI :: (BN :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: [])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) } :: { levels =
    ((Some ((fun x -> x + 1) ((fun x -> x + 1) 0))) :: (None :: [])); ordering = (0 :: []);
    data = (((L :: (LRE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((L :: (LRO :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((L :: (RLE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((L :: (RLO :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((L :: (PDF :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((L :: (BN :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((EN :: (LRE :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((EN :: (LRO :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((EN :: (RLE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((EN :: (RLO :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((EN :: (PDF :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((EN :: (BN :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((AN :: (LRE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((AN :: (LRO :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((AN :: (RLE :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((AN :: (RLO :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((AN :: (PDF :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((AN :: (BN :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: [])))))))))))))))))) } :: { levels = (None :: ((Some 0) :: [])); ordering =
    (((fun x -> x + 1) 0) :: []); data = (((LRE :: (B :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((LRE :: (S :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((LRE :: (WS :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((LRE :: (LRI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((LRE :: (RLI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((LRE :: (FSI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((LRE :: (PDI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((LRO :: (B :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((LRO :: (S :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((LRO :: (WS :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((LRO :: (LRI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((LRO :: (RLI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((LRO :: (FSI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((LRO :: (PDI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLE :: (B :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLE :: (S :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLE :: (WS :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLE :: (LRI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLE :: (RLI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLE :: (FSI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLE :: (PDI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLO :: (B :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLO :: (S :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLO :: (WS :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLO :: (LRI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLO :: (RLI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLO :: (FSI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLO :: (PDI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((PDF :: (L :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((PDF :: (EN :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((PDF :: (ES :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((PDF :: (ET :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((PDF :: (CS :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((PDF :: (NSM :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((PDF :: (B :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((PDF :: (S :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((PDF :: (WS :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((PDF :: (ON :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((PDF :: (LRI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((PDF :: (RLI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((PDF :: (FSI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((PDF :: (PDI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((BN :: (L :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((BN :: (EN :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((BN :: (ES :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((BN :: (ET :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((BN :: (CS :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((BN :: (NSM :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((BN :: (B :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((BN :: (S :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((BN :: (WS :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((BN :: (ON :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((BN :: (LRI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((BN :: (RLI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((BN :: (FSI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((BN :: (PDI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1)
    0)))) :: [])))))))))))))))))))))))))))))))))))))))))))))))))))))))) } :: { levels =
    (None :: ((Some ((fun x -> x + 1) 0)) :: [])); ordering = (((fun x -> x + 1) 0) :: []);
    data = (((LRE :: (B :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((LRE :: (S :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((LRE :: (WS :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((LRE :: (LRI :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((LRE :: (RLI :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((LRE :: (FSI :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((LRE :: (PDI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((LRO :: (B :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((LRO :: (S :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((LRO :: (WS :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((LRO :: (LRI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((LRO :: (RLI :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((LRO :: (FSI :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((LRO :: (PDI :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((RLE :: (R :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) 0))) :: (((RLE :: (AL :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    0))) :: (((RLE :: (ES :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))) :: (((RLE :: (ET :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))) :: (((RLE :: (CS :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))) :: (((RLE :: (NSM :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))) :: (((RLE :: (B :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((RLE :: (S :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((RLE :: (WS :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((RLE :: (ON :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLE :: (LRI :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((RLE :: (RLI :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((RLE :: (FSI :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((RLE :: (PDI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((RLO :: (L :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0)))) :: (((RLO :: (R :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) 0))) :: (((RLO :: (AL :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) 0))) :: (((RLO :: (EN :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0)))) :: (((RLO :: (ES :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0)))) :: (((RLO :: (ET :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0)))) :: (((RLO :: (AN :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0)))) :: (((RLO :: (CS :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0)))) :: (((RLO :: (NSM :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0)))) :: (((RLO :: (B :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((RLO :: (S :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((RLO :: (WS :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((RLO :: (ON :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))) :: (((RLO :: (LRI :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((RLO :: (RLI :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((RLO :: (FSI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((RLO :: (PDI :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((PDF :: (R :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((PDF :: (AL :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((PDF :: (ES :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((PDF :: (ET :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((PDF :: (CS :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((PDF :: (NSM :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((PDF :: (B :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((PDF :: (S :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((PDF :: (WS :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((PDF :: (ON :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((PDF :: (LRI :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((PDF :: (RLI :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((PDF :: (FSI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((PDF :: (PDI :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((BN :: (R :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((BN :: (AL :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0)))))))) :: (((BN :: (ES :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((BN :: (ET :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((BN :: (CS :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((BN :: (NSM :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((BN :: (B :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((BN :: (S :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((BN :: (WS :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((BN :: (ON :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: (((BN :: (LRI :: [])), ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) 0))))) :: (((BN :: (RLI :: [])), ((fun x -> x + 1) ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((BN :: (FSI :: [])), ((fun x -> x + 1)
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))) :: (((BN :: (PDI :: [])),
    ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
    0))))) :: []))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) } :: []
